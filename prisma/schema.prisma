// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  contents Content[]
  auditLogs AuditLog[]
  uploadedFiles File[]
  userPermissions UserPermission[]

  @@index([role])
  @@index([createdAt])
  @@index([updatedAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// 权限管理
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique  // 权限名称，如 'content:read', 'users:write'
  description String?             // 权限描述
  resource    String              // 资源类型，如 'content', 'users', 'files'
  action      String              // 操作类型，如 'read', 'write', 'delete'
  createdAt   DateTime @default(now())

  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@index([resource])
  @@index([action])
  @@index([resource, action])
}

// 角色权限关联表
model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  granted      Boolean    @default(true)  // 是否授予权限
  createdAt    DateTime   @default(now())

  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
  @@index([granted])
}

// 用户特定权限（覆盖角色权限）
model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean  // true=授予, false=拒绝（覆盖角色权限）
  reason       String?  // 授予/拒绝原因
  expiresAt    DateTime? // 权限过期时间
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@index([granted])
  @@index([expiresAt])
  @@index([createdAt])
}

// Content Management
model Content {
  id        String        @id @default(cuid())
  type      ContentType
  title     String
  slug      String        @unique
  content   String
  excerpt   String?
  status    ContentStatus @default(DRAFT)
  authorId  String
  imageUrl  String?
  tags      String? // JSON string for SQLite compatibility
  metadata  Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  author User @relation(fields: [authorId], references: [id])

  @@index([type])
  @@index([status])
  @@index([authorId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([type, status])
  @@index([status, createdAt])
}

enum ContentType {
  NEWS
  CASE_STUDY
  SERVICE
  PAGE
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Form Submissions
model FormSubmission {
  id        String             @id @default(cuid())
  type      FormSubmissionType
  data      Json
  status    SubmissionStatus   @default(NEW)
  notes     String?            // For storing error messages or additional info
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([type, status])
  @@index([status, createdAt])
}

enum FormSubmissionType {
  CONTACT
  CONSULTATION
  NEWSLETTER
}

enum SubmissionStatus {
  NEW
  PROCESSED
  REPLIED
  ARCHIVED
  EMAIL_FAILED
}

// File Management
model File {
  id              String   @id @default(cuid())
  filename        String
  storedFilename  String
  url             String
  size            Int
  mimeType        String
  type            FileType @default(IMAGE)
  uploadedBy      String?
  uploadedById    String?  
  uploadedByUser  User?    @relation(fields: [uploadedById], references: [id])
  createdAt       DateTime @default(now())

  @@index([type])
  @@index([uploadedById])
  @@index([createdAt])
  @@index([mimeType])
  @@index([type, createdAt])
}

enum FileType {
  IMAGE
  DOCUMENT
}

// Audit Logs
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([userId, action])
  @@index([resource, action])
  @@index([createdAt, action])
}
