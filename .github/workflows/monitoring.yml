name: üìä Monitoring & Health Checks

on:
  schedule:
    # ÊØè15ÂàÜÈíüËøêË°å‰∏ÄÊ¨°ÂÅ•Â∫∑Ê£ÄÊü•
    - cron: '*/15 * * * *'
    # ÊØèÂ§©ÂáåÊô®2ÁÇπËøêË°åÂÆåÊï¥ÁõëÊéßÊä•Âëä
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: true
        default: 'health'
        type: choice
        options:
          - health
          - performance
          - security
          - full

env:
  PRODUCTION_URL: https://southpole.com
  DEV_URL: https://dev.southpole.com

jobs:
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '*/15 * * * *' || github.event.inputs.check_type == 'health' || github.event.inputs.check_type == 'full'
    
    strategy:
      matrix:
        environment: [production, development]
        include:
          - environment: production
            url: https://southpole.com
          - environment: development
            url: https://dev.southpole.com
    
    steps:
      - name: üîç Check website availability
        id: health
        run: |
          echo "Checking ${{ matrix.url }}..."
          
          # Âü∫Á°ÄÂèØËÆøÈóÆÊÄßÊ£ÄÊü•
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ matrix.url }}" || echo "000")
          RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "${{ matrix.url }}" || echo "999")
          
          echo "http_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "‚úÖ ${{ matrix.environment }}: HTTP $HTTP_CODE, ${RESPONSE_TIME}s"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "‚ùå ${{ matrix.environment }}: HTTP $HTTP_CODE, ${RESPONSE_TIME}s"
          fi

      - name: üîç Check critical pages
        if: steps.health.outputs.status == 'healthy'
        run: |
          declare -a pages=("/" "/services" "/about" "/contact" "/news")
          
          for page in "${pages[@]}"; do
            URL="${{ matrix.url }}$page"
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ $page: HTTP $HTTP_CODE"
            else
              echo "‚ùå $page: HTTP $HTTP_CODE"
            fi
          done

      - name: üìä Content verification
        if: steps.health.outputs.status == 'healthy'
        run: |
          # Ê£ÄÊü•‰∏ªÈ°µÊòØÂê¶ÂåÖÂê´ÂÖ≥ÈîÆÂÜÖÂÆπ
          CONTENT=$(curl -s "${{ matrix.url }}")
          
          if echo "$CONTENT" | grep -q "South Pole"; then
            echo "‚úÖ Content verification passed"
          else
            echo "‚ùå Content verification failed"
            exit 1
          fi

      - name: üö® Alert on failure
        if: steps.health.outputs.status == 'unhealthy' && matrix.environment == 'production'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: 'danger',
                title: 'üö® PRODUCTION SITE DOWN',
                text: `
                  *Environment*: ${{ matrix.environment }}
                  *URL*: ${{ matrix.url }}
                  *HTTP Code*: ${{ steps.health.outputs.http_code }}
                  *Response Time*: ${{ steps.health.outputs.response_time }}s
                  *Time*: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
                `,
                footer: 'Immediate attention required!',
                ts: Math.floor(Date.now() / 1000)
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-monitoring:
    name: ‚ö° Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'full'
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: üîß Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üö® Run Lighthouse on Production
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://southpole.com
            https://southpole.com/services
            https://southpole.com/about
          configPath: './lighthouse.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: üìä Performance metrics
        run: |
          echo "üìä **Performance Report**" > performance-report.md
          echo "" >> performance-report.md
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> performance-report.md
          echo "" >> performance-report.md
          
          # Âü∫Êú¨ÊÄßËÉΩÊåáÊ†á
          for url in "https://southpole.com" "https://southpole.com/services" "https://southpole.com/about"; do
            echo "### $url" >> performance-report.md
            
            RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$url")
            SIZE=$(curl -s "$url" | wc -c)
            
            echo "- Response Time: ${RESPONSE_TIME}s" >> performance-report.md
            echo "- Page Size: ${SIZE} bytes" >> performance-report.md
            echo "" >> performance-report.md
          done

      - name: üìä Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.md

  security-monitoring:
    name: üîí Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'full'
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üîí Security headers check
        run: |
          echo "üîí **Security Headers Report**" > security-report.md
          echo "" >> security-report.md
          
          # Ê£ÄÊü•Áîü‰∫ßÁéØÂ¢ÉÂÆâÂÖ®Â§¥
          URL="https://southpole.com"
          
          echo "### Security Headers for $URL" >> security-report.md
          echo "" >> security-report.md
          
          # Ëé∑ÂèñÂìçÂ∫îÂ§¥
          HEADERS=$(curl -s -I "$URL")
          
          # Ê£ÄÊü•ÂÖ≥ÈîÆÂÆâÂÖ®Â§¥
          declare -a security_headers=(
            "X-Frame-Options"
            "X-Content-Type-Options"
            "X-XSS-Protection"
            "Strict-Transport-Security"
            "Content-Security-Policy"
            "Referrer-Policy"
            "Permissions-Policy"
          )
          
          for header in "${security_headers[@]}"; do
            if echo "$HEADERS" | grep -i "$header" > /dev/null; then
              VALUE=$(echo "$HEADERS" | grep -i "$header" | cut -d' ' -f2-)
              echo "‚úÖ $header: $VALUE" >> security-report.md
            else
              echo "‚ùå $header: Missing" >> security-report.md
            fi
          done

      - name: üîç SSL/TLS check
        run: |
          echo "" >> security-report.md
          echo "### SSL/TLS Configuration" >> security-report.md
          echo "" >> security-report.md
          
          # Ê£ÄÊü• SSL ËØÅ‰π¶
          SSL_INFO=$(openssl s_client -connect southpole.com:443 -servername southpole.com </dev/null 2>/dev/null | openssl x509 -noout -dates)
          
          echo "```" >> security-report.md
          echo "$SSL_INFO" >> security-report.md
          echo "```" >> security-report.md

      - name: üìä Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

  uptime-tracking:
    name: ‚è∞ Uptime Tracking
    runs-on: ubuntu-latest
    if: github.event.schedule == '*/15 * * * *' || github.event.inputs.check_type == 'health' || github.event.inputs.check_type == 'full'
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üìä Record uptime data
        run: |
          mkdir -p monitoring/uptime
          
          # Ê£ÄÊü•Áîü‰∫ßÁéØÂ¢É
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S")
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://southpole.com" || echo "000")
          RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "https://southpole.com" || echo "999")
          
          # ËÆ∞ÂΩïÊï∞ÊçÆ
          echo "$TIMESTAMP,$HTTP_CODE,$RESPONSE_TIME" >> monitoring/uptime/production-$(date +%Y%m).csv
          
          # Ê£ÄÊü•ÂºÄÂèëÁéØÂ¢É
          DEV_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://dev.southpole.com" || echo "000")
          DEV_RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "https://dev.southpole.com" || echo "999")
          
          echo "$TIMESTAMP,$DEV_HTTP_CODE,$DEV_RESPONSE_TIME" >> monitoring/uptime/development-$(date +%Y%m).csv

      - name: üìä Generate uptime summary
        if: github.event.schedule == '0 2 * * *'
        run: |
          # ÁîüÊàêÊØèÊó•Ê≠£Â∏∏ËøêË°åÊó∂Èó¥Êä•Âëä
          YESTERDAY=$(date -d "yesterday" +%Y-%m-%d)
          
          echo "üìä **Daily Uptime Report - $YESTERDAY**" > uptime-summary.md
          echo "" >> uptime-summary.md
          
          # ÂàÜÊûêÊò®Â§©ÁöÑÊï∞ÊçÆ
          if [ -f "monitoring/uptime/production-$(date +%Y%m).csv" ]; then
            TOTAL_CHECKS=$(grep "$YESTERDAY" monitoring/uptime/production-$(date +%Y%m).csv | wc -l)
            SUCCESSFUL_CHECKS=$(grep "$YESTERDAY" monitoring/uptime/production-$(date +%Y%m).csv | grep ",200," | wc -l)
            
            if [ $TOTAL_CHECKS -gt 0 ]; then
              UPTIME_PERCENTAGE=$(echo "scale=2; $SUCCESSFUL_CHECKS * 100 / $TOTAL_CHECKS" | bc)
              echo "### Production Environment" >> uptime-summary.md
              echo "- Total Checks: $TOTAL_CHECKS" >> uptime-summary.md
              echo "- Successful Checks: $SUCCESSFUL_CHECKS" >> uptime-summary.md
              echo "- Uptime: $UPTIME_PERCENTAGE%" >> uptime-summary.md
            fi
          fi

      - name: üìä Upload uptime data
        uses: actions/upload-artifact@v3
        with:
          name: uptime-data
          path: monitoring/

  daily-report:
    name: üìä Daily Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, security-monitoring, uptime-tracking]
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.check_type == 'full'
    
    steps:
      - name: üì• Download reports
        uses: actions/download-artifact@v3

      - name: üìä Generate comprehensive report
        run: |
          echo "# üìä Daily Monitoring Report - $(date +%Y-%m-%d)" > daily-report.md
          echo "" >> daily-report.md
          echo "Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> daily-report.md
          echo "" >> daily-report.md
          
          # ÂêàÂπ∂ÊâÄÊúâÊä•Âëä
          if [ -f "performance-report/performance-report.md" ]; then
            echo "## Performance Report" >> daily-report.md
            cat performance-report/performance-report.md >> daily-report.md
            echo "" >> daily-report.md
          fi
          
          if [ -f "security-report/security-report.md" ]; then
            echo "## Security Report" >> daily-report.md
            cat security-report/security-report.md >> daily-report.md
            echo "" >> daily-report.md
          fi
          
          if [ -f "uptime-summary.md" ]; then
            echo "## Uptime Report" >> daily-report.md
            cat uptime-summary.md >> daily-report.md
          fi

      - name: üìß Send daily report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: üìä South Pole Daily Monitoring Report - $(date +%Y-%m-%d)
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: South Pole Monitoring <noreply@southpole.com>
          body: file://daily-report.md

      - name: üìä Archive reports
        uses: actions/upload-artifact@v3
        with:
          name: daily-monitoring-report-$(date +%Y%m%d)
          path: daily-report.md
          retention-days: 30