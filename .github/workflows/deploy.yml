name: 🚀 Deploy & CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 代码质量检查
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📝 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 ESLint check
        run: pnpm run lint
        continue-on-error: false

      - name: 🔍 TypeScript check
        run: pnpm run type-check
        continue-on-error: false

      - name: 📊 Bundle analyzer check
        run: pnpm run analyze
        continue-on-error: true

  # 测试流程
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📝 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm run test
        continue-on-error: false

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 构建测试
  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        environment: [development, production]
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📝 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🌍 Setup environment variables
        run: |
          if [ "${{ matrix.environment }}" = "production" ]; then
            echo "NEXT_PUBLIC_SITE_URL=https://southpole.com" >> $GITHUB_ENV
            echo "NODE_ENV=production" >> $GITHUB_ENV
          else
            echo "NEXT_PUBLIC_SITE_URL=https://dev.southpole.com" >> $GITHUB_ENV
            echo "NODE_ENV=development" >> $GITHUB_ENV
          fi

      - name: 🏗️ Build application
        run: pnpm run build
        env:
          NEXT_PUBLIC_GA_ID: ${{ secrets.NEXT_PUBLIC_GA_ID }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: 📊 Check build size
        run: |
          du -sh .next/
          find .next -name "*.js" -type f -exec wc -c {} + | sort -n | tail -10

  # 性能检查
  lighthouse:
    name: 🚨 Lighthouse CI
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build for Lighthouse
        run: pnpm run build

      - name: 🚨 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 部署到开发环境
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/dev'
    environment: development
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Dev)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          alias-domains: |
            dev.southpole.com

  # 预览部署（PR）
  deploy-preview:
    name: 🔍 Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'pull_request'
    environment: preview
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Deploy Preview to Vercel
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 💬 Comment Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployment ready!**
              
              📱 **Preview URL**: ${{ steps.vercel-deploy.outputs.preview-url }}
              
              📊 **Build Details**:
              - Commit: ${{ github.sha }}
              - Branch: ${{ github.head_ref }}
              - Environment: Preview
              
              🔍 **Quality Checks**: All passed ✅`
            })

  # 部署到生产环境
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, lighthouse]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Create Release Tag
        id: tag
        run: |
          TAG="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag $TAG
          git push origin $TAG

      - name: 🌟 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          alias-domains: |
            southpole.com
            www.southpole.com

      - name: 📝 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          body: |
            🚀 **Production Deployment**
            
            **Deployed at**: ${{ steps.vercel-deploy.outputs.preview-url }}
            **Commit**: ${{ github.sha }}
            **Branch**: main
            
            **Changes in this release**:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # 通知配置
  notify:
    name: 📢 Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 📢 Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `🚀 South Pole deployment ${{ job.status }}!\n\n*Repository:* ${process.env.AS_REPO}\n*Branch:* ${process.env.AS_REF}\n*Commit:* ${process.env.AS_COMMIT}\n*Author:* ${process.env.AS_AUTHOR}\n*Workflow:* ${process.env.AS_WORKFLOW}\n*Duration:* ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email Notification
        uses: dawidd6/action-send-mail@v3
        if: failure()
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 🚨 South Pole Deployment Failed
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: South Pole CI/CD <noreply@southpole.com>
          body: |
            Deployment failed for South Pole project.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please check the GitHub Actions logs for more details.